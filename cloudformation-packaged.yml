Resources:
  ApiLambda:
    Properties:
      Code:
        S3Bucket: fauna-test-deployments
        S3Key: 9dfb30cf4fa66ebab8d20af851de478a
      FunctionName: fauna-test
      Handler: tsc-out/src/Handler.handler
      Role:
        Fn::GetAtt:
        - ApiLambdaRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 30
    Type: AWS::Lambda::Function
  ApiLambdaDeployment:
    Properties:
      RestApiId:
        Ref: ApiLambdaGateway
      StageDescription:
        LoggingLevel: INFO
        MetricsEnabled: true
      StageName: _
    Type: AWS::ApiGateway::Deployment
  ApiLambdaGateway:
    Properties:
      Body:
        basePath: /
        definitions:
          Empty:
            title: Empty Schema
            type: object
        info:
          title: AwsServerlessExpressApi
        paths:
          /{proxy+}:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-logging-context'''
                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            x-amazon-apigateway-any-method:
              parameters:
              - in: path
                name: proxy
                required: true
                type: string
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
                uri:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:apigateway:'
                    - Ref: AWS::Region
                    - ':lambda:path/2015-03-31/functions/arn:aws:lambda:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':function:'
                    - Ref: ApiLambda
                    - /invocations
        schemes:
        - https
        swagger: 2.0
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-logging-context'''
              gatewayresponse.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
              gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-logging-context'''
              gatewayresponse.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
              gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      EndpointConfiguration:
        Types:
        - EDGE
      Name: fauna-test-gateway
    Type: AWS::ApiGateway::RestApi
  ApiLambdaGatewayPermissions:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - ApiLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiLambdaGateway}/*
    Type: AWS::Lambda::Permission
  ApiLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
            - edgelambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
      Path: /
    Type: AWS::IAM::Role
  ApiLambdaStage:
    Properties:
      DeploymentId:
        Ref: ApiLambdaDeployment
      Description: dev lambda-api
      RestApiId:
        Ref: ApiLambdaGateway
      StageName: dev
      Variables:
        version: dev
    Type: AWS::ApiGateway::Stage
